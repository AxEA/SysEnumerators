//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysSequenceReal extends SysSequence implements ISysSequence
{
    SysRangeReal range;
    real step;

    public SysSequenceReal clone()
    {
        SysSequenceReal sequence = SysSequenceReal::construct(this.range().start(), this.range().end(), this.step());

        return sequence;
    }

    protected SysRangeReal defaultRange()
    {
        return SysRangeReal::construct();
    }

    public real end()
    {
        return this.range().end();
    }

    public boolean equal(SysSequenceReal sequence)
    {
        boolean ret = sequence
                      && (this.range().equal(sequence.range()))
                      && (this.step() == sequence.step());
        return ret;
    }

    public SysIterations estimatedIterations()
    {
        SysIterations ret = SysEnumerator::IterationsMax();
        Amount distance = this.range().distance();
        boolean overflow = this.range().cover(0) && (distance <= 0.00001);

        if( !overflow )
        {
            if( distance == 0 )
            {
                ret = 1;
            }
            else if( ((distance < 0) && (this.step() > 0))
                  || ((distance > 0) && (this.step() < 0)) )
            {
                ret = 0;
            }
            else if( step == 1 )
            {
                ret = any2int64(distance + 1.0);
            }
            else
            {
                ret = any2int64(distance / this.step() + 1.0);
            }
        }

        return ret;
    }

    public SysEnumerator getEnumerator()
    {
        return SysEnumerator::newFromToReal(this.range().start(), this.range().end(), this.step());
    }

    public real getNext(real value)
    {
        return value + this.step();
    }

    public void new(SysRangeReal _range, real _step = 1.0)
    {;
        Debug::assert(_step != 0.0);

        if ( !_range )
        {
            _range = this.defaultRange();
        }

        range = _range;
        step = _step;
    }

    public SysSequenceReal normalize()
    {
        SysSequenceReal sequence;

        if( this.range().reversed() )
        {
            sequence = this.reverse();
        }
        else
        {
            sequence = this.clone();
        }

        return sequence;
    }

    public SysRangeReal range()
    {
        return range;
    }

    public SysSequenceReal reverse()
    {
        SysSequenceReal sequence = SysSequenceReal::construct(this.range().end(), this.range().start(), this.reverseStep());

        return sequence;
    }

    public real reverseStep()
    {
        return -step;
    }

    public real start()
    {
        return this.range().start();
    }

    public real step()
    {
        return step;
    }

    public str toString()
    {
        return strfmt('%1:%2', this.step(), this.range().toString());
    }

    public static SysSequenceReal construct(real start = 1.0, real end = RealMax(), real step = 1.0)
    {
        SysRangeReal range = SysRangeReal::construct(start, end);
        SysSequenceReal sequence = new SysSequenceReal(range, step);

        return sequence;
    }

    public static SysSequenceReal newFromRange(SysRangeReal range, real step = 1.0)
    {
        SysSequenceReal sequence = new SysSequenceReal(range, step);

        return sequence;
    }
}