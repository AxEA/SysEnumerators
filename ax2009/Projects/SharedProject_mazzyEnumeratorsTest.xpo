Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: SysRangeAmountTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysRangeAmountTest
    PROPERTIES
      Name                #SysRangeAmountTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #class SysRangeAmountTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysRangeAmount range = SysRangeAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(start, range.start());
        #    this.assertEquals(end, range.end());
        #}
      ENDSOURCE
      SOURCE #test1stDefault
        #void test1stDefault()
        #{
        #    SysRangeAmount range = SysRangeAmount::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0, range.start());
        #    this.assertEquals(RealMax(), range.end());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysRangeAmount range = SysRangeAmount::construct(start, end);
        #    SysRangeAmount clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysRangeAmount range = SysRangeAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    Amount start = 5.0;
        #    Amount end = 2.0;
        #    Amount middle = 3.0;
        #
        #    SysRangeAmount range = SysRangeAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsZero
        #void testContainsZero()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount middle = 0.0;
        #
        #    SysRangeAmount range = SysRangeAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysRangeAmount range = SysRangeAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    Amount start = 5.0;
        #    Amount end = 2.0;
        #    Amount middle = 3.0;
        #
        #    SysRangeAmount range = SysRangeAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverZero
        #void testCoverZero()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount middle = 0.0;
        #
        #    SysRangeAmount range = SysRangeAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysRangeAmount range = SysRangeAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceDefault
        #void testDistanceDefault()
        #{
        #    SysRangeAmount range = SysRangeAmount::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(RealMax(), range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    Amount start = 5.0;
        #    Amount end = 2.0;
        #    Amount middle = 3.0;
        #
        #    SysRangeAmount range = SysRangeAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysRangeAmount range = SysRangeAmount::construct(RealMax(), RealMin());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysRangeAmount range = SysRangeAmount::construct(RealMin(), RealMax());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysRangeAmount range = SysRangeAmount::construct(start, end);
        #    SysRangeAmount middleRange = SysRangeAmount::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysRangeAmount range = SysRangeAmount::construct(start, end);
        #    SysRangeAmount middleRange = SysRangeAmount::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysRangeAmount range = SysRangeAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysRangeAmount range = SysRangeAmount::construct(start, end);
        #    SysRangeAmount reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(-range.distance(), reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #
        #    SysRangeAmount range = SysRangeAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #    this.assertEquals(strfmt('%1..%2', start, end), range.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysRangeDateTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysRangeDateTest
    PROPERTIES
      Name                #SysRangeDateTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #class SysRangeDateTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysRangeDate range = SysRangeDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #    this.assertEquals(start, range.start());
        #    this.assertEquals(end, range.end());
        #}
      ENDSOURCE
      SOURCE #test1stDefault
        #void test1stDefault()
        #{
        #    SysRangeDate range = SysRangeDate::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(DateNull(), range.start());
        #    this.assertEquals(DateMax(), range.end());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysRangeDate range = SysRangeDate::construct(start, end);
        #    SysRangeDate clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysRangeDate range = SysRangeDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    Date start = 31\12\2017;
        #    Date end = 20\01\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysRangeDate range = SysRangeDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysRangeDate range = SysRangeDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    Date start = 31\12\2017;
        #    Date end = 20\01\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysRangeDate range = SysRangeDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysRangeDate range = SysRangeDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceDefault
        #void testDistanceDefault()
        #{
        #    SysRangeDate range = SysRangeDate::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(93136, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    Date start = 31\12\2017;
        #    Date end = 20\01\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysRangeDate range = SysRangeDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysRangeDate range = SysRangeDate::construct(DateMax(), DateNull());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(-93136, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysRangeDate range = SysRangeDate::construct(DateNull(), DateMax());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(93136, range.distance());
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysRangeDate range = SysRangeDate::construct(start, end);
        #    SysRangeDate middleRange = SysRangeDate::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysRangeDate range = SysRangeDate::construct(start, end);
        #    SysRangeDate middleRange = SysRangeDate::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysRangeDate range = SysRangeDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysRangeDate range = SysRangeDate::construct(start, end);
        #    SysRangeDate reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(-range.distance(), reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #
        #    SysRangeDate range = SysRangeDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #    this.assertEquals(strfmt('%1..%2', start, end), range.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysRangeInt64Test unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysRangeInt64Test
    PROPERTIES
      Name                #SysRangeInt64Test
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #class SysRangeInt64Test extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysRangeInt64 range = SysRangeInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(start, range.start());
        #    this.assertEquals(end, range.end());
        #}
      ENDSOURCE
      SOURCE #test1stDefault
        #void test1stDefault()
        #{
        #    SysRangeInt64 range = SysRangeInt64::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(zero64 + 1, range.start());
        #    this.assertEquals(int64Max(), range.end());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysRangeInt64 range = SysRangeInt64::construct(start, end);
        #    SysRangeInt64 clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysRangeInt64 range = SysRangeInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    Int64 start = 5;
        #    Int64 end = 2;
        #    Int64 middle = 3;
        #
        #    SysRangeInt64 range = SysRangeInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsZero
        #void testContainsZero()
        #{
        #    Int64 start = -5;
        #    Int64 end = 2;
        #    Int64 middle = 0;
        #
        #    SysRangeInt64 range = SysRangeInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysRangeInt64 range = SysRangeInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    Int64 start = 5;
        #    Int64 end = 2;
        #    Int64 middle = 3;
        #
        #    SysRangeInt64 range = SysRangeInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverZero
        #void testCoverZero()
        #{
        #    Int64 start = -5;
        #    Int64 end = 2;
        #    Int64 middle = 0;
        #
        #    SysRangeInt64 range = SysRangeInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysRangeInt64 range = SysRangeInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceDefault
        #void testDistanceDefault()
        #{
        #    SysRangeInt64 range = SysRangeInt64::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(int64Max()-1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    Int64 start = 5;
        #    Int64 end = 2;
        #    Int64 middle = 3;
        #
        #    SysRangeInt64 range = SysRangeInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysRangeInt64 range = SysRangeInt64::construct(int64Max(), int64Min());
        #    int64 zero64;
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(zero64 + 1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysRangeInt64 range = SysRangeInt64::construct(int64Min(), int64Max());
        #    int64 zero64;
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(zero64 -1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysRangeInt64 range = SysRangeInt64::construct(start, end);
        #    SysRangeInt64 middleRange = SysRangeInt64::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysRangeInt64 range = SysRangeInt64::construct(start, end);
        #    SysRangeInt64 middleRange = SysRangeInt64::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysRangeInt64 range = SysRangeInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysRangeInt64 range = SysRangeInt64::construct(start, end);
        #    SysRangeInt64 reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(-range.distance(), reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysRangeInt64 range = SysRangeInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #    this.assertEquals(strfmt('%1..%2', start, end), range.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysRangeIntTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysRangeIntTest
    PROPERTIES
      Name                #SysRangeIntTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #class SysRangeIntTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysRangeInt range = SysRangeInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(start, range.start());
        #    this.assertEquals(end, range.end());
        #}
      ENDSOURCE
      SOURCE #test1stDefault
        #void test1stDefault()
        #{
        #    SysRangeInt range = SysRangeInt::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(1, range.start());
        #    this.assertEquals(maxint(), range.end());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysRangeInt range = SysRangeInt::construct(start, end);
        #    SysRangeInt clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysRangeInt range = SysRangeInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int middle = 3;
        #
        #    SysRangeInt range = SysRangeInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsZero
        #void testContainsZero()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int middle = 0;
        #
        #    SysRangeInt range = SysRangeInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysRangeInt range = SysRangeInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int middle = 3;
        #
        #    SysRangeInt range = SysRangeInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverZero
        #void testCoverZero()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int middle = 0;
        #
        #    SysRangeInt range = SysRangeInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysRangeInt range = SysRangeInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceDefault
        #void testDistanceDefault()
        #{
        #    SysRangeInt range = SysRangeInt::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(maxint()-1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int middle = 3;
        #
        #    SysRangeInt range = SysRangeInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysRangeInt range = SysRangeInt::construct(maxint(), minint());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysRangeInt range = SysRangeInt::construct(minint(), maxint());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysRangeInt range = SysRangeInt::construct(start, end);
        #    SysRangeInt middleRange = SysRangeInt::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysRangeInt range = SysRangeInt::construct(start, end);
        #    SysRangeInt middleRange = SysRangeInt::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysRangeInt range = SysRangeInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysRangeInt range = SysRangeInt::construct(start, end);
        #    SysRangeInt reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(-range.distance(), reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysRangeInt range = SysRangeInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #    this.assertEquals(strfmt('%1..%2', start, end), range.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysRangeRealTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysRangeRealTest
    PROPERTIES
      Name                #SysRangeRealTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #class SysRangeRealTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysRangeReal range = SysRangeReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(start, range.start());
        #    this.assertEquals(end, range.end());
        #}
      ENDSOURCE
      SOURCE #test1stDefault
        #void test1stDefault()
        #{
        #    SysRangeReal range = SysRangeReal::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0, range.start());
        #    this.assertEquals(RealMax(), range.end());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysRangeReal range = SysRangeReal::construct(start, end);
        #    SysRangeReal clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysRangeReal range = SysRangeReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    Real start = 5.0;
        #    Real end = 2.0;
        #    Real middle = 3.0;
        #
        #    SysRangeReal range = SysRangeReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsZero
        #void testContainsZero()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real middle = 0.0;
        #
        #    SysRangeReal range = SysRangeReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysRangeReal range = SysRangeReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    Real start = 5.0;
        #    Real end = 2.0;
        #    Real middle = 3.0;
        #
        #    SysRangeReal range = SysRangeReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverZero
        #void testCoverZero()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real middle = 0.0;
        #
        #    SysRangeReal range = SysRangeReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysRangeReal range = SysRangeReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceDefault
        #void testDistanceDefault()
        #{
        #    SysRangeReal range = SysRangeReal::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(RealMax(), range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    Real start = 5.0;
        #    Real end = 2.0;
        #    Real middle = 3.0;
        #
        #    SysRangeReal range = SysRangeReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysRangeReal range = SysRangeReal::construct(RealMax(), RealMin());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysRangeReal range = SysRangeReal::construct(RealMin(), RealMax());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysRangeReal range = SysRangeReal::construct(start, end);
        #    SysRangeReal middleRange = SysRangeReal::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysRangeReal range = SysRangeReal::construct(start, end);
        #    SysRangeReal middleRange = SysRangeReal::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysRangeReal range = SysRangeReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysRangeReal range = SysRangeReal::construct(start, end);
        #    SysRangeReal reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(-range.distance(), reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #
        #    SysRangeReal range = SysRangeReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #    this.assertEquals(strfmt('%1..%2', start, end), range.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceAmountTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceAmountTest
    PROPERTIES
      Name                #SysSequenceAmountTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #class SysSequenceAmountTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 1.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test2
        #void test2()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 2.0;
        #    int64 iterations = 2;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 3.0;
        #    int64 iterations = 2;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testDefault
        #void testDefault()
        #{
        #    SysSequenceAmount sequence = SysSequenceAmount::construct();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(1.0, sequence.start());
        #    this.assertEquals(RealMax(), sequence.end());
        #    this.assertEquals(RealMax(), sequence.distance());
        #    this.assertEquals(1.0, sequence.step());
        #
        #    this.assertEquals(int64Max(), sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    Amount start = 5.0;
        #    Amount end = 2.0;
        #    Amount step = 1.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 1.0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 1.0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testMaxMin1
        #void testMaxMin1()
        #{
        #    Amount start = RealMax();
        #    Amount end = RealMin();
        #    Amount step = 1.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin2
        #void testMaxMin2()
        #{
        #    Amount start = RealMax();
        #    Amount end = RealMin();
        #    Amount step = 2.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin3
        #void testMaxMin3()
        #{
        #    Amount start = RealMax();
        #    Amount end = RealMin();
        #    Amount step = 3.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    Amount start = RealMin();
        #    Amount end = RealMax();
        #    Amount step = 1.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    Amount start = RealMin();
        #    Amount end = RealMax();
        #    Amount step = 2.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    Amount start = RealMin();
        #    Amount end = RealMax();
        #    Amount step = 3.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax1
        #void testMinusMax1()
        #{
        #    Amount start = -1;
        #    Amount end = RealMax();
        #    Amount step = 1.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax2
        #void testMinusMax2()
        #{
        #    Amount start = -1;
        #    Amount end = RealMax();
        #    Amount step = 2.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax3
        #void testMinusMax3()
        #{
        #    Amount start = -1;
        #    Amount end = RealMax();
        #    Amount step = 3.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative1
        #void testNegative1()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 1.0;
        #    int64 iterations = 8;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative2
        #void testNegative2()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 2.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative3
        #void testNegative3()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 3.0;
        #    int64 iterations = 3;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative9
        #void testNegative9()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 1.0;
        #    int64 iterations = 8;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse2
        #void testReverse2()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 2.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 3.0;
        #    int64 iterations = 3;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 1.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(strfmt('%3:[%1..%2]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceDateTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceDateTest
    PROPERTIES
      Name                #SysSequenceDateTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #class SysSequenceDateTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 1;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 3;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 9;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testDefault
        #void testDefault()
        #{
        #    SysSequenceDate sequence = SysSequenceDate::construct();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(DateNull(), sequence.start());
        #    this.assertEquals(DateMax(), sequence.end());
        #    this.assertEquals(any2int(DateMax() - DateNull()), sequence.distance());
        #    this.assertEquals(1, sequence.step());
        #
        #    this.assertEquals(any2int64(DateMax() - DateNull() + 1), sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    Date start = 31\12\2017;
        #    Date end = 20\012\2017;
        #    int step = 1;
        #    int64 iterations = 0;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 1;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 1;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testMaxMin1
        #void testMaxMin1()
        #{
        #    Date start = DateMax();
        #    Date end = DateNull();
        #    int step = 1;
        #    int64 iterations = 0;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin2
        #void testMaxMin2()
        #{
        #    Date start = DateMax();
        #    Date end = DateNull();
        #    int step = 2;
        #    int64 iterations = 0;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin3
        #void testMaxMin3()
        #{
        #    Date start = DateMax();
        #    Date end = DateNull();
        #    int step = 3;
        #    int64 iterations = 0;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    Date start = DateNull();
        #    Date end = DateMax();
        #    int step = 1;
        #    int64 iterations = 93137;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    Date start = DateNull();
        #    Date end = DateMax();
        #    int step = 2;
        #    int64 iterations = 46569;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    Date start = DateNull();
        #    Date end = DateMax();
        #    int step = 3;
        #    int64 iterations = 31046;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 1;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 3;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 9;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 1;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(strfmt('%3:[%1..%2]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceInt64Test unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceInt64Test
    PROPERTIES
      Name                #SysSequenceInt64Test
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #class SysSequenceInt64Test extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 1;
        #    int64 iterations = 4;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 3;
        #    int64 iterations = 2;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testDefault
        #void testDefault()
        #{
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(any2int64(1), sequence.start());
        #    this.assertEquals(int64Max(), sequence.end());
        #    this.assertEquals(int64Max()-1, sequence.distance());
        #    this.assertEquals(any2int64(1), sequence.step());
        #
        #    this.assertEquals(int64Max(), sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    int64 start = 5;
        #    int64 end = 2;
        #    int64 step = 1;
        #    int64 iterations = 0;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    int64 start = int64Min();
        #    int64 end = int64Max();
        #    int64 step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    int64 start = int64Min();
        #    int64 end = int64Max();
        #    int64 step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    int64 start = int64Min();
        #    int64 end = int64Max();
        #    int64 step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax1
        #void testMinusMax1()
        #{
        #    int64 start = -1;
        #    int64 end = int64Max();
        #    int64 step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax2
        #void testMinusMax2()
        #{
        #    int64 start = -1;
        #    int64 end = int64Max();
        #    int64 step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax3
        #void testMinusMax3()
        #{
        #    int64 start = -1;
        #    int64 end = int64Max();
        #    int64 step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative1
        #void testNegative1()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative3
        #void testNegative3()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative9
        #void testNegative9()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(strfmt('%3:[%1..%2]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceIntTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceIntTest
    PROPERTIES
      Name                #SysSequenceIntTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #class SysSequenceIntTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #    int64 iterations = 4;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 3;
        #    int64 iterations = 2;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testDefault
        #void testDefault()
        #{
        #    SysSequenceInt sequence = SysSequenceInt::construct();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(1, sequence.start());
        #    this.assertEquals(maxint(), sequence.end());
        #    this.assertEquals(maxint()-1, sequence.distance());
        #    this.assertEquals(1, sequence.step());
        #
        #    this.assertEquals(any2int64(maxint()), sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int step = 1;
        #    int64 iterations = 0;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    int start = minint();
        #    int end = maxint();
        #    int step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    int start = minint();
        #    int end = maxint();
        #    int step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    int start = minint();
        #    int end = maxint();
        #    int step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax1
        #void testMinusMax1()
        #{
        #    int start = -1;
        #    int end = maxint();
        #    int step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax2
        #void testMinusMax2()
        #{
        #    int start = -1;
        #    int end = maxint();
        #    int step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax3
        #void testMinusMax3()
        #{
        #    int start = -1;
        #    int end = maxint();
        #    int step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative1
        #void testNegative1()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative2
        #void testNegative2()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 2;
        #    int64 iterations = 4;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative3
        #void testNegative3()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative9
        #void testNegative9()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(strfmt('%3:[%1..%2]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceRealTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceRealTest
    PROPERTIES
      Name                #SysSequenceRealTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #class SysSequenceRealTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 1.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 3.0;
        #    int64 iterations = 2;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testDefault
        #void testDefault()
        #{
        #    SysSequenceReal sequence = SysSequenceReal::construct();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(1.0, sequence.start());
        #    this.assertEquals(RealMax(), sequence.end());
        #    this.assertEquals(RealMax(), sequence.distance());
        #    this.assertEquals(1.0, sequence.step());
        #
        #    this.assertEquals(int64Max(), sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    Real start = 5.0;
        #    Real end = 2.0;
        #    Real step = 1.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 1.0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 1.0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testMaxMin1
        #void testMaxMin1()
        #{
        #    Real start = RealMax();
        #    Real end = RealMin();
        #    Real step = 1.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin2
        #void testMaxMin2()
        #{
        #    Real start = RealMax();
        #    Real end = RealMin();
        #    Real step = 2.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin3
        #void testMaxMin3()
        #{
        #    Real start = RealMax();
        #    Real end = RealMin();
        #    Real step = 3.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    Real start = RealMin();
        #    Real end = RealMax();
        #    Real step = 1.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    Real start = RealMin();
        #    Real end = RealMax();
        #    Real step = 2.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    Real start = RealMin();
        #    Real end = RealMax();
        #    Real step = 3.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax1
        #void testMinusMax1()
        #{
        #    Real start = -1;
        #    Real end = RealMax();
        #    Real step = 1.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax2
        #void testMinusMax2()
        #{
        #    Real start = -1;
        #    Real end = RealMax();
        #    Real step = 2.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax3
        #void testMinusMax3()
        #{
        #    Real start = -1;
        #    Real end = RealMax();
        #    Real step = 3.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative1
        #void testNegative1()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 1.0;
        #    int64 iterations = 8;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative3
        #void testNegative3()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 3.0;
        #    int64 iterations = 3;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative9
        #void testNegative9()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 1.0;
        #    int64 iterations = 8;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 3.0;
        #    int64 iterations = 3;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 1.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(strfmt('%3:[%1..%2]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_ArrayTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_ArrayTest
    PROPERTIES
      Name                #SysEnumerator_ArrayTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #class SysEnumerator_ArrayTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testArray
        #void testArray()
        #{
        #    Array arr = new Array(Types::String);
        #    SysEnumerator_Array se;
        #    int64 zero64;
        #
        #    arr.value(1, 'a');
        #    arr.value(5, 'e');
        #    arr.value(2, 'b');
        #    arr.value(3, 'c');
        #    arr.value(4, 'd');
        #
        #    se = SysEnumerator_Array::construct(arr);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals(4, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testArrayEmpty
        #void testArrayEmpty()
        #{
        #    Array arr = new Array(Types::String);
        #    SysEnumerator_Array se = SysEnumerator_Array::construct(arr);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testArraySkipUntilEnd
        #void testArraySkipUntilEnd()
        #{
        #    Array arr = new Array(Types::String);
        #    SysEnumerator_Array se;
        #    int64 zero64;
        #
        #    arr.value(1, 'a');
        #    arr.value(5, 'e');
        #    arr.value(2, 'b');
        #    arr.value(3, 'c');
        #    arr.value(4, 'd');
        #
        #    se = SysEnumerator_Array::construct(arr);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertFalse(se.skip(10));
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_ContainerClassTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_ContainerClassTest
    PROPERTIES
      Name                #SysEnumerator_ContainerClassTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #class SysEnumerator_ContainerClassTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testContainer
        #void testContainer()
        #{
        #    container con = ['a','b','c','d','e'];
        #    ContainerClass cc = new ContainerClass(con);
        #    SysEnumerator_ContainerClass se = SysEnumerator_ContainerClass::construct(cc);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals(4, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testContainerEmpty
        #void testContainerEmpty()
        #{
        #    container con = connull();
        #    SysEnumerator_Container se = SysEnumerator_Container::construct(con);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testContainerSkip
        #void testContainerSkip()
        #{
        #    container con = ['a','b','c','d','e'];
        #    SysEnumerator_Container se = SysEnumerator_Container::construct(con);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.skip());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.skip(2));
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_ContainerTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_ContainerTest
    PROPERTIES
      Name                #SysEnumerator_ContainerTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #class SysEnumerator_ContainerTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testContainer
        #void testContainer()
        #{
        #    container con = ['a','b','c','d','e'];
        #    SysEnumerator_Container se = SysEnumerator_Container::construct(con);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals(4, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testContainerEmpty
        #void testContainerEmpty()
        #{
        #    container con = connull();
        #    SysEnumerator_Container se = SysEnumerator_Container::construct(con);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testContainerSkip
        #void testContainerSkip()
        #{
        #    container con = ['a','b','c','d','e'];
        #    SysEnumerator_Container se = SysEnumerator_Container::construct(con);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.skip());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.skip(2));
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_EmptyTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_EmptyTest
    PROPERTIES
      Name                #SysEnumerator_EmptyTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_EmptyTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    SysEnumerator_Empty se = SysEnumerator_Empty::construct();
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_EnumTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_EnumTest
    PROPERTIES
      Name                #SysEnumerator_EnumTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_EnumTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testEnum
        #void testEnum()
        #{
        #    DictEnum dictEnum = new DictEnum(enumnum(ABC));
        #    SysEnumerator_Enum se = SysEnumerator_Enum::construct(dictEnum);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 4, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(0, se.current());
        #    this.assertEquals('None', se.currentKey());
        #    this.assertEquals(0+ABC::None, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals('A', se.currentKey());
        #    this.assertEquals(0+ABC::A, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals('B', se.currentKey());
        #    this.assertEquals(0+ABC::B, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals('C', se.currentKey());
        #    this.assertEquals(0+ABC::C, se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 4, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_FirstTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_FirstTest
    PROPERTIES
      Name                #SysEnumerator_FirstTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_FirstTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testFirst
        #void testFirst()
        #{
        #    SysEnumerator_First se = SysEnumerator_First::construct(3);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #    this.assertEquals(3, se.remains());
        #    this.assertEquals(3, se.first());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #    this.assertEquals(1, se.currentValue());
        #    this.assertEquals(2, se.remains());
        #    this.assertEquals(3, se.first());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #    this.assertEquals(2, se.currentValue());
        #    this.assertEquals(1, se.remains());
        #    this.assertEquals(3, se.first());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #    this.assertEquals(3, se.currentValue());
        #    this.assertEquals(0, se.remains());
        #    this.assertEquals(3, se.first());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Int64Test unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Int64Test
    PROPERTIES
      Name                #SysEnumerator_Int64Test
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Int64Test extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testInt64
        #void testInt64()
        #{
        #    SysEnumerator_Int64 se = SysEnumerator_Int64::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(zero64 + 1, se.current());
        #    this.assertEquals(zero64 + 1, se.currentIdx());
        #    this.assertEquals(zero64 + 1, se.currentKey());
        #    this.assertEquals(zero64 + 1, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(zero64 + 2, se.current());
        #    this.assertEquals(zero64 + 2, se.currentIdx());
        #    this.assertEquals(zero64 + 2, se.currentKey());
        #    this.assertEquals(zero64 + 2, se.currentValue());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_IntTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_IntTest
    PROPERTIES
      Name                #SysEnumerator_IntTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_IntTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testInt
        #void testInt()
        #{
        #    SysEnumerator_Int se = SysEnumerator_Int::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + maxint(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #    this.assertEquals(1, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #    this.assertEquals(2, se.currentValue());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Keywords_FunctionTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Keywords_FunctionTest
    PROPERTIES
      Name                #SysEnumerator_Keywords_FunctionTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Keywords_FunctionTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testKeywordsFunction
        #void testKeywordsFunction()
        #{
        #    SysEnumerator_Keywords_Function se = SysEnumerator_Keywords_Function::construct();
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('abs', se.current());
        #    this.assertEquals('abs', se.currentIdx());
        #    this.assertEquals('abs', se.currentKey());
        #    this.assertEquals('abs', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('acos', se.current());
        #    this.assertEquals('acos', se.currentIdx());
        #    this.assertEquals('acos', se.currentKey());
        #    this.assertEquals('acos', se.currentValue());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Keywords_SymbolTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Keywords_SymbolTest
    PROPERTIES
      Name                #SysEnumerator_Keywords_SymbolTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Keywords_SymbolTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testKeywordsSymbol
        #void testKeywordsSymbol()
        #{
        #    SysEnumerator_Keywords_Symbol se = SysEnumerator_Keywords_Symbol::construct();
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('abstract', se.current());
        #    this.assertEquals('abstract', se.currentIdx());
        #    this.assertEquals('abstract', se.currentKey());
        #    this.assertEquals('abstract', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('anytype', se.current());
        #    this.assertEquals('anytype', se.currentIdx());
        #    this.assertEquals('anytype', se.currentKey());
        #    this.assertEquals('anytype', se.currentValue());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_ListTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_ListTest
    PROPERTIES
      Name                #SysEnumerator_ListTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_ListTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testList
        #void testList()
        #{
        #    List l = new List(Types::String);
        #    SysEnumerator_List se;
        #    int64 zero64;
        #
        #    l.addEnd('a');
        #    l.addEnd('b');
        #    l.addEnd('c');
        #    l.addEnd('d');
        #    l.addEnd('e');
        #
        #    se = SysEnumerator_List::construct(l);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentKey());
        #    this.assertEquals('a', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentKey());
        #    this.assertEquals('b', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentKey());
        #    this.assertEquals('c', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentKey());
        #    this.assertEquals('d', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentKey());
        #    this.assertEquals('e', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testListEmpty
        #void testListEmpty()
        #{
        #    List l = new List(Types::String);
        #    SysEnumerator_List se = SysEnumerator_List::construct(l);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_MapTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_MapTest
    PROPERTIES
      Name                #SysEnumerator_MapTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_MapTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testMap
        #void testMap()
        #{
        #    // see also test combined Map + Range
        #
        #    Map m = new Map(Types::Integer,Types::String);
        #    SysEnumerator_Map se;
        #    int64 zero64;
        #
        #    m.insert(10, 'a');
        #    m.insert(50, 'e');
        #    m.insert(20, 'b');
        #    m.insert(30, 'c');
        #    m.insert(40, 'd');
        #
        #    se = SysEnumerator_Map::construct(m);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertNotNull(se);
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(10, se.current());
        #    this.assertEquals(10, se.currentIdx());
        #    this.assertEquals(10, se.currentKey());
        #    this.assertEquals('a', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(20, se.current());
        #    this.assertEquals(20, se.currentIdx());
        #    this.assertEquals(20, se.currentKey());
        #    this.assertEquals('b', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(30, se.current());
        #    this.assertEquals(30, se.currentIdx());
        #    this.assertEquals(30, se.currentKey());
        #    this.assertEquals('c', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(40, se.current());
        #    this.assertEquals(40, se.currentIdx());
        #    this.assertEquals(40, se.currentKey());
        #    this.assertEquals('d', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(50, se.current());
        #    this.assertEquals(50, se.currentIdx());
        #    this.assertEquals(50, se.currentKey());
        #    this.assertEquals('e', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMapEmpty
        #void testMapEmpty()
        #{
        #    Map m = new Map(Types::Integer, Types::String);
        #    SysEnumerator_Map se = SysEnumerator_Map::construct(m);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_RecordTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_RecordTest
    PROPERTIES
      Name                #SysEnumerator_RecordTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_RecordTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testRecord
        #void testRecord()
        #{
        #    // see also combined Record + value2set
        #
        #    SysUserInfo sysUserInfo = SysUserInfo::find();
        #    SysEnumerator_Record se = SysEnumerator_Record::construct(sysUserInfo);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    while(se.moveNext())
        #    {
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    }
        #
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testRecordEmpty
        #void testRecordEmpty()
        #{
        #    // see also combined Record + value2set
        #
        #    SysUserInfo sysUserInfo = SysUserInfo::find(); // first only, current user
        #    SysEnumerator_Record se = SysEnumerator_Record::construct(sysUserInfo);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testRecordReset
        #void testRecordReset()
        #{
        #    SysUserInfo sysUserInfo = SysUserInfo::find();
        #    SysEnumerator_Record se = SysEnumerator_Record::construct(sysUserInfo);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.parmExceptionExpected(true);
        #
        #    se.reset();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_SequenceTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_SequenceTest
    PROPERTIES
      Name                #SysEnumerator_SequenceTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_SequenceTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testSequence
        #void testSequence()
        #{
        #    SysSequenceInt sequence = SysSequenceInt::construct(1, 5, 2);
        #    SysEnumerator_Sequence se = SysEnumerator_Sequence::construct(sequence);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(1, se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals(3, se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(5, se.current());
        #    this.assertEquals(5, se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSequenceEmpty
        #void testSequenceEmpty()
        #{
        #    SysSequenceInt sequence = SysSequenceInt::construct(1, 0, 2);
        #    SysEnumerator_Sequence se = SysEnumerator_Sequence::construct(sequence);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSequenceReset
        #void testSequenceReset()
        #{
        #    SysSequenceInt    sequence = SysSequenceInt::construct(1, 5, 2);
        #    SysEnumerator_Sequence se = SysEnumerator_Sequence::construct(sequence);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(1, se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals(3, se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    se.reset();
        #
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(1, se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals(3, se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(5, se.current());
        #    this.assertEquals(5, se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_SetTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_SetTest
    PROPERTIES
      Name                #SysEnumerator_SetTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_SetTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testSet
        #void testSet()
        #{
        #    Set s = new Set(Types::String);
        #    SysEnumerator_Set se;
        #    int64 zero64;
        #
        #    s.add('a');
        #    s.add('e');
        #    s.add('b');
        #    s.add('c');
        #    s.add('d');
        #
        #    se = SysEnumerator_Set::construct(s);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSetEmpty
        #void testSetEmpty()
        #{
        #    Set s = new Set(Types::String);
        #    SysEnumerator_Set se = SysEnumerator_Set::construct(s);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_StructTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_StructTest
    PROPERTIES
      Name                #SysEnumerator_StructTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_StructTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testStruct
        #void testStruct()
        #{
        #    Struct s = new Struct();
        #    SysEnumerator_Struct se;
        #    int64 zero64;
        #
        #    s.add('field1', 'a');
        #    s.add('field5', 'e');
        #    s.add('field2', 'b');
        #    s.add('field3', 'c');
        #    s.add('field4', 'd');
        #
        #    se = SysEnumerator_Struct::construct(s);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals('field1', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals('field5', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals('field2', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals('field3', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals('field4', se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testStructEmpty
        #void testStructEmpty()
        #{
        #    Struct s = new Struct();
        #    SysEnumerator_Struct se = SysEnumerator_Struct::construct(s);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_SystemCollectionTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_SystemCollectionTest
    PROPERTIES
      Name                #SysEnumerator_SystemCollectionTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_SystemCollectionTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testSystemCollection
        #void testSystemCollection()
        #{
        #    System.Collections.ArrayList array = new System.Collections.ArrayList();
        #    SysEnumerator_SystemCollection se = SysEnumerator_SystemCollection::construct(array);
        #;
        #    array.Add('a');
        #    array.Add('e');
        #    array.Add('b');
        #    array.Add('c');
        #    array.Add('d');
        #
        #    this.assertNotNull(se);
        #
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals('a', se.currentIdx());
        #    this.assertEquals('a', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals('e', se.currentIdx());
        #    this.assertEquals('e', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals('b', se.currentIdx());
        #    this.assertEquals('b', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.currentIdx());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals('d', se.currentIdx());
        #    this.assertEquals('d', se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSystemCollectionReset
        #void testSystemCollectionReset()
        #{
        #    System.Collections.ArrayList array = new System.Collections.ArrayList();
        #    SysEnumerator_SystemCollection se = SysEnumerator_SystemCollection::construct(array);
        #;
        #    array.Add('a');
        #    array.Add('e');
        #    array.Add('b');
        #    array.Add('c');
        #    array.Add('d');
        #
        #    this.assertNotNull(se);
        #
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    se.reset();
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals('a', se.currentIdx());
        #    this.assertEquals('a', se.currentKey());
        #
        #    se.reset();
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals('a', se.currentIdx());
        #    this.assertEquals('a', se.currentKey());
        #}
      ENDSOURCE
      SOURCE #testSystemCollectionSkip
        #void testSystemCollectionSkip()
        #{
        #    System.Collections.ArrayList array = new System.Collections.ArrayList();
        #    SysEnumerator_SystemCollection se = SysEnumerator_SystemCollection::construct(array);
        #;
        #    array.Add('a');
        #    array.Add('e');
        #    array.Add('b');
        #    array.Add('c');
        #    array.Add('d');
        #
        #    this.assertNotNull(se);
        #
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.skip(3));
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TreeNodeChildrenTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TreeNodeChildrenTest
    PROPERTIES
      Name                #SysEnumerator_TreeNodeChildrenTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TreeNodeChildrenTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #void testChildNodes()
        #{
        #    SysDictTable    sysDictTable = new SysDictTable(tablenum(CustTable));
        #    SysEnumerator_TreeNodeChildren se = SysEnumerator_TreeNodeChildren::construct(sysDictTable.treeNode());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 6, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Fields', se.current().AOTname());
        #    this.assertEquals('Fields', se.currentValue().AOTname());
        #    this.assertEquals('Fields', se.currentIdx().AOTname());
        #    this.assertEquals('Fields', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Field Groups', se.current().AOTname());
        #    this.assertEquals('Field Groups', se.currentValue().AOTname());
        #    this.assertEquals('Field Groups', se.currentIdx().AOTname());
        #    this.assertEquals('Field Groups', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Indexes', se.current().AOTname());
        #    this.assertEquals('Indexes', se.currentValue().AOTname());
        #    this.assertEquals('Indexes', se.currentIdx().AOTname());
        #    this.assertEquals('Indexes', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Relations', se.current().AOTname());
        #    this.assertEquals('Relations', se.currentValue().AOTname());
        #    this.assertEquals('Relations', se.currentIdx().AOTname());
        #    this.assertEquals('Relations', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('DeleteActions', se.current().AOTname());
        #    this.assertEquals('DeleteActions', se.currentValue().AOTname());
        #    this.assertEquals('DeleteActions', se.currentIdx().AOTname());
        #    this.assertEquals('DeleteActions', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Methods', se.current().AOTname());
        #    this.assertEquals('Methods', se.currentValue().AOTname());
        #    this.assertEquals('Methods', se.currentIdx().AOTname());
        #    this.assertEquals('Methods', se.currentKey().AOTname());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 6, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    SysEnumerator_TreeNodeChildren se = SysEnumerator_TreeNodeChildren::construct(null);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testFindChildNodes
        #void testFindChildNodes()
        #{
        #    SysDictTable    sysDictTable = new SysDictTable(tablenum(CustTable));
        #    SysEnumerator_TreeNodeChildren se = SysEnumerator_TreeNodeChildren::construct(sysDictTable.treeNode(), 'Indexes');
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 6, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Indexes', se.current().AOTname());
        #    this.assertEquals('Indexes', se.currentValue().AOTname());
        #    this.assertEquals('Indexes', se.currentIdx().AOTname());
        #    this.assertEquals('Indexes', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Relations', se.current().AOTname());
        #    this.assertEquals('Relations', se.currentValue().AOTname());
        #    this.assertEquals('Relations', se.currentIdx().AOTname());
        #    this.assertEquals('Relations', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('DeleteActions', se.current().AOTname());
        #    this.assertEquals('DeleteActions', se.currentValue().AOTname());
        #    this.assertEquals('DeleteActions', se.currentIdx().AOTname());
        #    this.assertEquals('DeleteActions', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Methods', se.current().AOTname());
        #    this.assertEquals('Methods', se.currentValue().AOTname());
        #    this.assertEquals('Methods', se.currentIdx().AOTname());
        #    this.assertEquals('Methods', se.currentKey().AOTname());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 6, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TreeNodeSiblingTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TreeNodeSiblingTest
    PROPERTIES
      Name                #SysEnumerator_TreeNodeSiblingTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TreeNodeSiblingTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #void testChildNodes()
        #{
        #    SysDictTable    sysDictTable = new SysDictTable(tablenum(CustTable));
        #    SysEnumerator_TreeNodeSibling se = SysEnumerator_TreeNodeSibling::construct(sysDictTable.treeNode().AOTfirstChild());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Fields', se.current().AOTname());
        #    this.assertEquals('Fields', se.currentValue().AOTname());
        #    this.assertEquals('Fields', se.currentIdx().AOTname());
        #    this.assertEquals('Fields', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Field Groups', se.current().AOTname());
        #    this.assertEquals('Field Groups', se.currentValue().AOTname());
        #    this.assertEquals('Field Groups', se.currentIdx().AOTname());
        #    this.assertEquals('Field Groups', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Indexes', se.current().AOTname());
        #    this.assertEquals('Indexes', se.currentValue().AOTname());
        #    this.assertEquals('Indexes', se.currentIdx().AOTname());
        #    this.assertEquals('Indexes', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Relations', se.current().AOTname());
        #    this.assertEquals('Relations', se.currentValue().AOTname());
        #    this.assertEquals('Relations', se.currentIdx().AOTname());
        #    this.assertEquals('Relations', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('DeleteActions', se.current().AOTname());
        #    this.assertEquals('DeleteActions', se.currentValue().AOTname());
        #    this.assertEquals('DeleteActions', se.currentIdx().AOTname());
        #    this.assertEquals('DeleteActions', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Methods', se.current().AOTname());
        #    this.assertEquals('Methods', se.currentValue().AOTname());
        #    this.assertEquals('Methods', se.currentIdx().AOTname());
        #    this.assertEquals('Methods', se.currentKey().AOTname());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    SysEnumerator_TreeNodeSibling se = SysEnumerator_TreeNodeSibling::construct(null);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlChildrenTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlChildrenTest
    PROPERTIES
      Name                #SysEnumerator_XmlChildrenTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlChildrenTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #void testChildNodes()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlChildren se = SysEnumerator_XmlChildren::construct(xmlDoc.root());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('ххх', se.current().name());
        #    this.assertEquals('ххх', se.currentValue().name());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    XmlDocument xmlDoc = XmlDocument::newBlank();
        #    SysEnumerator_XmlChildren se = SysEnumerator_XmlChildren::construct(xmlDoc);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('xml', se.current().name());
        #    this.assertEquals('xml', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testXPath
        #void testXPath()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlChildren se = SysEnumerator_XmlChildren::construct(xmlDoc.selectSingleNode('root/element'));
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.1', se.current().text());
        #    this.assertEquals('1.1', se.currentValue().text());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.2', se.current().text());
        #    this.assertEquals('1.2', se.currentValue().text());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.3', se.current().text());
        #    this.assertEquals('1.3', se.currentValue().text());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.4', se.current().text());
        #    this.assertEquals('1.4', se.currentValue().text());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlNodeListIndexTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlNodeListIndexTest
    PROPERTIES
      Name                #SysEnumerator_XmlNodeListIndexTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlNodeListIndexTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #void testChildNodes()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeListIndex se = SysEnumerator_XmlNodeListIndex::construct(xmlDoc.root().childNodes());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('ххх', se.current().name());
        #    this.assertEquals('ххх', se.currentValue().name());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    XmlDocument xmlDoc = XmlDocument::newBlank();
        #    SysEnumerator_XmlNodeListIndex se = SysEnumerator_XmlNodeListIndex::construct(xmlDoc.childNodes());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 1, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('xml', se.current().name());
        #    this.assertEquals('xml', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 1, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testXPath
        #void testXPath()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeListIndex se = SysEnumerator_XmlNodeListIndex::construct(xmlDoc.selectNodes('root/element/sub'));
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.1', se.current().text());
        #    this.assertEquals('1.1', se.currentValue().text());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.2', se.current().text());
        #    this.assertEquals('1.2', se.currentValue().text());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.3', se.current().text());
        #    this.assertEquals('1.3', se.currentValue().text());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.4', se.current().text());
        #    this.assertEquals('1.4', se.currentValue().text());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.1', se.current().text());
        #    this.assertEquals('2.1', se.currentValue().text());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals(4, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.2', se.current().text());
        #    this.assertEquals('2.2', se.currentValue().text());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.3', se.current().text());
        #    this.assertEquals('2.3', se.currentValue().text());
        #    this.assertEquals(6, se.currentIdx());
        #    this.assertEquals(6, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlNodeListTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlNodeListTest
    PROPERTIES
      Name                #SysEnumerator_XmlNodeListTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlNodeListTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #void testChildNodes()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeList se = SysEnumerator_XmlNodeList::construct(xmlDoc.root().childNodes());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('ххх', se.current().name());
        #    this.assertEquals('ххх', se.currentValue().name());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    XmlDocument xmlDoc = XmlDocument::newBlank();
        #    SysEnumerator_XmlNodeList se = SysEnumerator_XmlNodeList::construct(xmlDoc.childNodes());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 1, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('xml', se.current().name());
        #    this.assertEquals('xml', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 1, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testXPath
        #void testXPath()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeList se = SysEnumerator_XmlNodeList::construct(xmlDoc.selectNodes('root/element/sub'));
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.1', se.current().text());
        #    this.assertEquals('1.1', se.currentValue().text());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.2', se.current().text());
        #    this.assertEquals('1.2', se.currentValue().text());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.3', se.current().text());
        #    this.assertEquals('1.3', se.currentValue().text());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.4', se.current().text());
        #    this.assertEquals('1.4', se.currentValue().text());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.1', se.current().text());
        #    this.assertEquals('2.1', se.currentValue().text());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals(4, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.2', se.current().text());
        #    this.assertEquals('2.2', se.currentValue().text());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.3', se.current().text());
        #    this.assertEquals('2.3', se.currentValue().text());
        #    this.assertEquals(6, se.currentIdx());
        #    this.assertEquals(6, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlSiblingTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlSiblingTest
    PROPERTIES
      Name                #SysEnumerator_XmlSiblingTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlSiblingTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #void testChildNodes()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlSibling se = SysEnumerator_XmlSibling::construct(xmlDoc.root().firstChild());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('ххх', se.current().name());
        #    this.assertEquals('ххх', se.currentValue().name());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    XmlDocument xmlDoc = XmlDocument::newBlank();
        #    SysEnumerator_XmlSibling se = SysEnumerator_XmlSibling::construct(xmlDoc.firstChild());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('xml', se.current().name());
        #    this.assertEquals('xml', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testXPath
        #void testXPath()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlSibling se = SysEnumerator_XmlSibling::construct(xmlDoc.selectSingleNode('root/element/sub'));
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.1', se.current().text());
        #    this.assertEquals('1.1', se.currentValue().text());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.2', se.current().text());
        #    this.assertEquals('1.2', se.currentValue().text());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.3', se.current().text());
        #    this.assertEquals('1.3', se.currentValue().text());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.4', se.current().text());
        #    this.assertEquals('1.4', se.currentValue().text());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumeratorGroupTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumeratorGroupTest
    PROPERTIES
      Name                #SysEnumeratorGroupTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumeratorGroupTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testAdd
        #void testAdd()
        #{
        #    SysEnumerator se = SysEnumerator::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #    this.assertEquals(0, se.enumerators().elements());
        #
        #    se.add(SysEnumerator_Int::newFromTo(1,100));
        #    this.assertEquals(1, se.enumerators().elements());
        #
        #    this.assertEquals(zero64 + 100, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    SysEnumerator se = SysEnumerator::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #    this.assertEquals(0, se.enumerators().elements());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testEstimatedIterations
        #void testEstimatedIterations()
        #{
        #    SysSequenceInt sequnce = SysSequenceInt::construct(1,100);
        #    SysEnumerator_Int intEnumerator = SysEnumerator_Int::construct(sequnce);
        #    SysEnumerator_First first5 = SysEnumerator_First::construct(5);
        #
        #    SysEnumerator se = SysEnumerator::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #    this.assertEquals(0, se.enumerators().elements());
        #
        #    se.add(intEnumerator);
        #    this.assertEquals(1, se.enumerators().elements());
        #    this.assertEquals(zero64 + 100, se.estimatedIterations());
        #
        #    se.add(first5);
        #    this.assertEquals(2, se.enumerators().elements());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumeratorTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumeratorTest
    PROPERTIES
      Name                #SysEnumeratorTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumeratorTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testArgsRecords
        #void testArgsRecords()
        #{
        #    Args args = new Args();
        #    DataArea dataArea;
        #    SysEnumerator se;
        #
        #    select dataArea;
        #    args.record(dataArea);
        #
        #    se = SysEnumerator::newFromArgsRecord(args);
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(dataArea, se.current());
        #    this.assertEquals(dataArea, se.currentKey());
        #    this.assertEquals(dataArea, se.currentValue());
        #}
      ENDSOURCE
      SOURCE #testCombinedMapRange
        #void testCombinedMapRange()
        #{
        #    Map m = new Map(Types::Integer,Types::String);
        #    SysEnumerator se;
        #
        #    m.insert(10, 'a');
        #    m.insert(50, 'e');
        #    m.insert(20, 'b');
        #    m.insert(30, 'c');
        #    m.insert(40, 'd');
        #
        #    se = SysEnumerator::construct()
        #        .add(SysEnumerator_Map::construct(m))
        #        .add(SysEnumerator_Int::construct());
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(10, se.currentKey());
        #    this.assertEquals('a', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals(20, se.currentKey());
        #    this.assertEquals('b', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals(30, se.currentKey());
        #    this.assertEquals('c', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(4, se.current());
        #    this.assertEquals(40, se.currentKey());
        #    this.assertEquals('d', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(5, se.current());
        #    this.assertEquals(50, se.currentKey());
        #    this.assertEquals('e', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    SysEnumerator se = SysEnumerator::construct();
        #
        #    this.assertNotNull(se);
        #}
      ENDSOURCE
      SOURCE #testEnum
        #void testEnum()
        #{
        #    ABC enum;
        #    SysEnumerator se = SysEnumerator::newFromEnum(enum);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(0, se.current());
        #    this.assertEquals('None', se.currentKey());
        #    this.assertEquals(0+ABC::None, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals('A', se.currentKey());
        #    this.assertEquals(0+ABC::A, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals('B', se.currentKey());
        #    this.assertEquals(0+ABC::B, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals('C', se.currentKey());
        #    this.assertEquals(0+ABC::C, se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testEnumId
        #void testEnumId()
        #{
        #    SysEnumerator se = SysEnumerator::newFromEnumId(enumnum(ABC));
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(0, se.current());
        #    this.assertEquals('None', se.currentKey());
        #    this.assertEquals(0+ABC::None, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals('A', se.currentKey());
        #    this.assertEquals(0+ABC::A, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals('B', se.currentKey());
        #    this.assertEquals(0+ABC::B, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals('C', se.currentKey());
        #    this.assertEquals(0+ABC::C, se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics AX Project : mazzyEnumeratorsTest unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #mazzyEnumeratorsTest
   SHARED
  PROPERTIES
    Name                #mazzyEnumeratorsTest
  ENDPROPERTIES
  
    PROJECTCLASS SysTestProject
    APPDATAEXPORT
    SOURCE #mazzyEnumeratorsTest
      #<APPDATA><info><version>2</version><onErrorAction>0</onErrorAction><codeCoverage>1</codeCoverage><listeners><name>SysTestListenerDB</name><name>SysTestListenerProgressbar</name></listeners></info></APPDATA>
    ENDSOURCE
    ENDAPPDATAEXPORT
    GROUP #SysRanges
      PROPERTIES
        Name                #SysRanges
        ProjectGroupType    #Classes
        GroupMask           #<SysRange.*Test>
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50131
        NODETYPE 329
        NAME #SysRangeAmountTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50130
        NODETYPE 329
        NAME #SysRangeDateTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50128
        NODETYPE 329
        NAME #SysRangeInt64Test
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50127
        NODETYPE 329
        NAME #SysRangeIntTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50129
        NODETYPE 329
        NAME #SysRangeRealTest
      ENDNODE
      ENDGROUP
      
    GROUP #SysSequences
      PROPERTIES
        Name                #SysSequences
        ProjectGroupType    #Classes
        GroupMask           #<SysSequence.*Test>
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50138
        NODETYPE 329
        NAME #SysSequenceAmountTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50139
        NODETYPE 329
        NAME #SysSequenceDateTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50136
        NODETYPE 329
        NAME #SysSequenceInt64Test
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50126
        NODETYPE 329
        NAME #SysSequenceIntTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50137
        NODETYPE 329
        NAME #SysSequenceRealTest
      ENDNODE
      ENDGROUP
      
    GROUP #SysEnumerators
      PROPERTIES
        Name                #SysEnumerators
        ProjectGroupType    #Classes
        GroupMask           #<SysEnumerator.*Test>
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50140
        NODETYPE 329
        NAME #SysEnumerator_ArrayTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50206
        NODETYPE 329
        NAME #SysEnumerator_ContainerClassTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50141
        NODETYPE 329
        NAME #SysEnumerator_ContainerTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50143
        NODETYPE 329
        NAME #SysEnumerator_EmptyTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50142
        NODETYPE 329
        NAME #SysEnumerator_EnumTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50207
        NODETYPE 329
        NAME #SysEnumerator_FirstTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50209
        NODETYPE 329
        NAME #SysEnumerator_Int64Test
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50208
        NODETYPE 329
        NAME #SysEnumerator_IntTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50210
        NODETYPE 329
        NAME #SysEnumerator_Keywords_FunctionTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50211
        NODETYPE 329
        NAME #SysEnumerator_Keywords_SymbolTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50144
        NODETYPE 329
        NAME #SysEnumerator_ListTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50145
        NODETYPE 329
        NAME #SysEnumerator_MapTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50146
        NODETYPE 329
        NAME #SysEnumerator_RecordTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50150
        NODETYPE 329
        NAME #SysEnumerator_SequenceTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50147
        NODETYPE 329
        NAME #SysEnumerator_SetTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50148
        NODETYPE 329
        NAME #SysEnumerator_StructTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50149
        NODETYPE 329
        NAME #SysEnumerator_SystemCollectionTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50213
        NODETYPE 329
        NAME #SysEnumerator_TreeNodeChildrenTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50212
        NODETYPE 329
        NAME #SysEnumerator_TreeNodeSiblingTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50167
        NODETYPE 329
        NAME #SysEnumerator_XmlChildrenTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50154
        NODETYPE 329
        NAME #SysEnumerator_XmlNodeListIndexTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50153
        NODETYPE 329
        NAME #SysEnumerator_XmlNodeListTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50166
        NODETYPE 329
        NAME #SysEnumerator_XmlSiblingTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50156
        NODETYPE 329
        NAME #SysEnumeratorGroupTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50102
        NODETYPE 329
        NAME #SysEnumeratorTest
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
