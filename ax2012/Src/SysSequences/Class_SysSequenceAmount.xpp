//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysSequenceAmount extends SysSequence
{
    amount step;

    public SysSequence clone()
    {
        SysSequenceAmount sequence = SysSequenceAmount::construct(this.start(), this.end(), this.step());

        return sequence;
    }

    public int64 estimatedIterations()
    {
        int64 ret = super();
        Amount distance = this.distance();
        boolean overflow = this.cover(0) && (distance <= 0.0001);

        if( overflow )
        {
            ret = int64Max();
        }
        else if( distance == 0 )
        {
            ret = 1;
        }
        else if( ((distance < 0) && (this.step() > 0))
              || ((distance > 0) && (this.step() < 0)) )
        {
            ret = 0;
        }
        else if( step == 1 )
        {
            ret = any2int64(distance + 1.0);
        }
        else
        {
            ret = any2int64(distance / this.step() + 1.0);
        }

        return ret;
    }

    public anytype getNext(anytype value)
    {
        Amount val = value;
        Amount ret = val + this.step();

        return ret;
    }

    public void new(amount _start = 1, amount _end = RealMax(), amount _step = 1)
    {;
        Debug::assert(_step != 0.0);

        step = _step;
        range = SysRangeAmount::construct(_start, _end);
    }

    public SysSequence reverse()
    {
        SysSequenceAmount sequence = SysSequenceAmount::construct(this.end(), this.start(), this.reverseStep());

        return sequence;
    }

    public anytype reverseStep()
    {
        return -step;
    }

    public anytype step()
    {
        return step;
    }

    public static SysSequenceAmount construct(amount _start = 1, amount _end = RealMax(), amount _step = 1)
    {
        SysSequenceAmount sequence = new SysSequenceAmount(_start, _end, _step);

        return sequence;
    }
}