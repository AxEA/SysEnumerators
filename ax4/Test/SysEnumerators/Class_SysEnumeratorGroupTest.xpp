//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysEnumeratorGroupTest extends SysTestCase
{

    public void testAdd()
    {
        SysEnumerator se = SysEnumerator::construct();

        this.assertNotNull(se);
        this.assertNotNull(se.enumerators());
        this.assertEquals(SysEnumerator::Iterations(0), se.enumerators().elements());

        se.add(SysEnumerator_Int::newFromTo(1,100));
        this.assertEquals(1, se.enumerators().elements());

        this.assertEquals(SysEnumerator::Iterations(100), se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
    }

    public void testEmpty()
    {
        SysEnumerator se = SysEnumerator::construct();

        this.assertNotNull(se);
        this.assertNotNull(se.enumerators());
        this.assertEquals(0, se.enumerators().elements());
        this.assertEquals(SysEnumerator::IterationsMax(), se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
    }

    public void testEstimatedIterations()
    {
        SysSequenceInt sequnce = SysSequenceInt::construct(1,100);
        SysEnumerator_Int intEnumerator = SysEnumerator_Int::construct(sequnce);
        SysEnumerator_First first5 = SysEnumerator_First::construct(5);

        SysEnumerator se = SysEnumerator::construct();

        this.assertNotNull(se);
        this.assertNotNull(se.enumerators());
        this.assertEquals(0, se.enumerators().elements());

        se.add(intEnumerator);
        this.assertEquals(1, se.enumerators().elements());
        this.assertEquals(SysEnumerator::Iterations(100), se.estimatedIterations());

        se.add(first5);
        this.assertEquals(2, se.enumerators().elements());
        this.assertEquals(SysEnumerator::Iterations(5), se.estimatedIterations());

        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
    }
}