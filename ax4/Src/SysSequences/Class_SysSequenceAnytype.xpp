//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysSequenceAnytype extends SysSequence implements ISysSequence
{
    SysRangeAnytype range;
    anytype step;

    public SysSequenceAnytype clone()
    {
        SysSequenceAnytype sequence = SysSequenceAnytype::construct(this.range().start(), this.range().end(), this.step());

        return sequence;
    }

    protected SysRangeAnytype defaultRange()
    {
        return SysRangeAnytype::construct(0,0);
    }

    public anyType end()
    {
        return this.range().end();
    }

    public boolean equal(SysSequenceAnytype sequence)
    {
        boolean ret = sequence
                      && (this.range().equal(sequence.range()))
                      && (this.step() == sequence.step());
        return ret;
    }

    public SysIterations estimatedIterations()
    {
        SysIterations ret = SysEnumerator::IterationsMax();

        return ret;
    }

    public SysEnumerator getEnumerator()
    {
        return SysEnumerator::sequence(this);
    }

    public anytype getNext(anytype value)
    {
        return value + this.step();
    }

    public void new(SysRangeAnytype _range, anytype _step)
    {;
        Debug::assert(_step != 0);

        if( !_range )
        {
            _range = this.defaultRange();
        }

        range = _range;
        step = _step;
    }

    public SysSequenceAnytype normalize()
    {
        SysSequenceAnytype sequence;

        if( this.range().reversed() )
        {
            sequence = this.reverse();
        }
        else
        {
            sequence = this.clone();
        }

        return sequence;
    }

    public SysRangeAnytype range()
    {
        return range;
    }

    public SysSequenceAnytype reverse()
    {
        SysSequenceAnytype sequence = SysSequenceAnytype::construct(this.range().end(), this.range().start(), this.reverseStep());

        return sequence;
    }

    public anytype reverseStep()
    {
        return 0-step;
    }

    public anytype start()
    {
        return this.range().start();
    }

    public anytype step()
    {
        return step;
    }

    public str toString()
    {
        return strfmt('%1:%2', this.step(), this.range().toString());
    }

    public static SysSequenceAnytype construct(anytype start, anytype end, anytype step)
    {
        SysRangeAnytype range = SysRangeAnytype::construct(start, end);
        SysSequenceAnytype sequence = new SysSequenceAnytype(range, step);

        return sequence;
    }

    public static SysSequenceAnytype newFromRange(SysRangeAnytype range, anytype step)
    {
        SysSequenceAnytype sequence = new SysSequenceAnytype(range, step);

        return sequence;
    }
}